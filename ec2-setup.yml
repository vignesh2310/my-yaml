---
- name: ec2 setup
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: import vpc variables
      include_vars: vars/output_vars

    - name: import stacksetup vars
      include_vars: vars/stacksetup
    
    - name: create ec2 key
      ec2_key:
        name: myec2key
        region: "{{region}}"
      register: myec2key_out


    - name: Save private key into file loginkey_ec2.pem
      copy:
        content: "{{myec2key_out.key.private_key}}"
        dest: "./loginkey_ec2.pem"
        mode: 0600
      when: myec2key_out.changed
    
    - name: creating load balancer sec grp
      ec2_group: 
        name: mylb-sg
        description: allow port 80 from everywhere and all port within sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: mylbsg_out

    - name: creating ec2 sec grp
      ec2_group: 
        name: myec2-sg
        description: allow port 22 from everywhere and all port within sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"  
        purge_rules: true
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{mylbsg_out.group_id}}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{bastionsgid}}"
      register: myec2sg_out        


    - name: Update Securiry Group with its own sg id
      ec2_group:
        name: myec2-sg-update
        description: Allow port 22 from everywhere and all port within sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{myec2sg_out.group_id}}"

    - name: Creating Nginx server
      ec2:
        key_name: myec2key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "nginx_server"
          Project: mytest_project
          Owner: vignesh
        exact_count: 1
        count_tag:
          Name: "nginx_server"
          Project: mytest_project
          Owner: vignesh
        group_id: "{{myec2sg_out.group_id}}"
        vpc_subnet_id: "{{pvtsub1id}}"
      register: nginx_out    


    - name: Creating tomcat server
      ec2:
        key_name: myec2key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "tomcat_server"
          Project: mytest_project
          Owner: vignesh
        exact_count: 1
        count_tag:
          Name: "tomcat_server"
          Project: mytest_project
          Owner: vignesh
        group_id: "{{myec2sg_out.group_id}}"
        vpc_subnet_id: "{{pvtsub1id}}"
      register: tomcat_out            


    - name: Creating memcache
      ec2:
        key_name: myec2key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{memcache_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "memcache"
          Project: mytest_project
          Owner: vignesh
        exact_count: 1
        count_tag:
          Name: "memcache"
          Project: mytest_project
          Owner: vignesh
        group_id: "{{myec2sg_out.group_id}}"
        vpc_subnet_id: "{{pvtsub1id}}"
      register: memcache_out            


    - name: Creating rabbit-mq
      ec2:
        key_name: myec2key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{rmq_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "rabbit"
          Project: mytest_project
          Owner: vignesh
        exact_count: 1
        count_tag:
          Name: "rabbit"
          Project: mytest_project
          Owner: vignesh
        group_id: "{{myec2sg_out.group_id}}"
        vpc_subnet_id: "{{pvtsub1id}}"
      register: rabbit_out

    - name: Creating my-sql
      ec2:
        key_name: myec2key
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{mysql_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: "sql"
          Project: mytest_project
          Owner: vignesh
        exact_count: 1
        count_tag:
          Name: "sql"
          Project: mytest_project
          Owner: vignesh
        group_id: "{{myec2sg_out.group_id}}"
        vpc_subnet_id: "{{pvtsub1id}}"
      register: sql_out             

    - debug:
        var: sql_out  

    - local_action:
        module: ec2_elb_lb
        name: "my-lb"
        region: "{{region}}"
        state: present
        instance_ids:
          - "{{ nginx_out.tagged_instances[0].id }}"
        purge_instance_ids: true
        security_group_ids: "{{ mylbsg_out.group_id }}"
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80     

    - name: Insert/Update Hosts IP & Name in file provision-stack/group_vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip
        block: |
          nginx_ip: {{ nginx_out.tagged_instances[0].private_ip }}
          tomcat_ip: {{ tomcat_out.tagged_instances[0].private_ip }}
          rabbit-mq_ip: {{ rabbit_out.tagged_instances[0].private_ip }}
          memcache_ip: {{ memcache_out.tagged_instances[0].private_ip }}
          my-sql_ip: {{ sql_out.tagged_instances[0].private_ip }}
       

    - name: Copy login key to provision_stack directory
      copy:
        src: loginkey_ec2.pem
        dest: provision-stack/loginkey_ec2.pem
        mode: '0400'  